<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cctrace.dao.AlertMapper">
	<resultMap id="BaseResultMap" type="com.cctrace.entity.Alert">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="containerId" jdbcType="VARCHAR" property="containerId" />
		<result column="alertTime" jdbcType="VARCHAR" property="alertTime" />
		<result column="alertLongTime" jdbcType="BIGINT" property="alertLongTime" />
		<result column="alertType" jdbcType="VARCHAR" property="alertType" />
		<result column="alertContent" jdbcType="VARCHAR" property="alertContent" />
		<result column="lat" jdbcType="DOUBLE" property="lat" />
		<result column="lon" jdbcType="DOUBLE" property="lon" />
		<result column="readed" jdbcType="VARCHAR" property="readed" />
		<result column="alarm_num " jdbcType="INTEGER" property="alarm_num " />
		<result column="gpsPosition " jdbcType="VARCHAR" property="gpsPosition " />
		<result column="updateTime " jdbcType="VARCHAR" property="updateTime " />
		<result column="updateLongTime" jdbcType="BIGINT" property="updateLongTime" />
		<result column="companyId" jdbcType="INTEGER" property="companyId" />
		<result column="buMenM" jdbcType="VARCHAR" property="buMenM" />
	</resultMap>

	<sql id="Base_Column_List">
		a.id, a.containerId, a.alertTime, a.alertLongTime, a.alertType, a.alertContent,
		a.lat, a.lon, a.readed, a.alarm_num, a.gpsPosition, a.updateTime, a.updateLongTime,
		a.companyId, b.buMenM
	</sql>

	<select id="selectAllAlerts" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where 1=1
	</select>
	<!-- 通过公司id查看预警 -->
	<select id="selectAllAlertsByCompanyId" resultType="com.cctrace.entity.Alert"
	 parameterType="java.util.Map" >
		select distinct(containerId)  from alert 
		where companyId =#{companyId} AND readed='no' AND alarm_num IS NOT NULL
		AND alertLongTime BETWEEN #{start} AND #{stop}
	</select>
	
	<!-- 根据设备号、预警号和24小时内查询最新一条预警-->
	<select id="selectAlertOnByContainerId" resultMap="BaseResultMap" >
		select 
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId=#{containerId} and a.readed='no'
		and a.alarm_num=#{alarm_num} and a.alertLongTime between #{startTime} and #{endTime}
		order by a.id desc limit 1
	</select>
	<!-- 根据设备号、预警号和24小时内查询所有预警-->
	<select id="selectAllAlertOnByContainerId" resultMap="BaseResultMap" >
		select 
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId=#{containerId} and a.readed='no'
		and a.alertLongTime between #{startTime} and #{endTime}
	</select>

	<select id="selectMaxAlertId" resultType="java.lang.Integer">
		select
		ifnull(max(id),0) from
		alert
	</select>

	<select id="selectAlertById" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.id = #{id}
	</select>

	<select id="selectAlertsByCompanyIdAndDays" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId in
		(select containerId from container where
		companyId = #{companyId}) and a.alertLongTime = #{longTime}
	</select>

	<select id="selectAlertsByCompanyId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId in
		(select containerId from container where
		companyId = #{companyId})
	</select>

	<!-- 看是否存在班列警告信息 -->
	<select id="selectIfAlertBytrainId" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM alert a inner join bindtable b on a.`containerId`=b.`containerId`
		WHERE a.containerId IN
		(SELECT containerId
		FROM bindtable WHERE
		containerId = #{containerId})
	</select>

	<select id="selectNotreadedAlertsByCompanyId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId in
		(select containerId from container where
		companyId = #{companyId}) and a.readed
		= 'no'
	</select>

	<select id="selectAlertsByContainderId" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId = #{containerId}
	</select>

	<select id="selectAlertsByCompanyIdInFourDays" resultMap="BaseResultMap">
		Select <include refid="Base_Column_List" /> 
		From alert a inner join bindtable b on a.`containerId`=b.`containerId` where a.containerId in (select containerId from container
			where companyId = #{companyId}) and a.alertLongTime > #{beginTime} order by a.id desc
			<!--  
		Union 
		Select <include refid="Base_Column_List" /> From (
		select <include refid="Base_Column_List" /> from alert where   containerId in (select containerId from container
   			where companyId = #{companyId}) and alertLongTime > #{beginTime} and readed='yes' order by id desc ) B -->
	</select>
	<!-- 找到最新的时间，往回溯 -->
	<select id="selectLastAlertsTimeByCompanyId" resultMap="BaseResultMap">
		SELECT 
		<include refid="Base_Column_List" />
		FROM alert a inner join bindtable b on a.`containerId`=b.`containerId`
		WHERE a.containerId IN (SELECT containerId FROM container
		WHERE companyId =
		#{companyId})
		ORDER BY a.alertTime DESC
	</select>

	<select id="selectAlertsByCompanyIdAndContainerIdLikely" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId in (select containerId from container
		where companyId = #{companyId}) and a.containerId like
		concat('%',#{containerId},'%') and a.alertLongTime > #{beginTime}
		group
		by a.alertLongTime desc
	</select>

	<select id="selectAlertsByCompanyIdAndContainerIdAndAlertTypeLikely" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId`
		where a.containerId in (select containerId from container
		where companyId=#{companyId} and containerId like
		concat('%',#{containerId},'%'))
		and a.alertType like
		concat('%',#{alertType},'%') and a.alertLongTime >
		#{beginTime}
		group by a.alertLongTime desc
	</select>

	<select id="selectAlertsByCompanyIdAndAlertTypeLikely" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from alert a inner join bindtable b on a.`containerId`=b.`containerId` where a.containerId in (select containerId from container
		where companyId=#{companyId})
		and a.alertType like
		concat('%',#{alertType},'%') and a.alertLongTime >
		#{beginTime} group by a.alertLongTime desc
	</select>
	<!-- 什么鬼？？？？ -->
	<select id="selectMaxAlertIdByCompanyId" parameterType="java.lang.Integer"
		resultType="java.lang.Integer">
		select ifnull(max(id),0) from alert where containerId in
		(select
		containerId from container where companyId = #{companyId})
		limit 0,1
	</select>


	<select id="selectCountNoReadedAlertsByCompanyIdAndbeginTime"
		parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(id) from alert
		where containerId in (select containerId from container where
		companyId = #{companyId} and alertLongTime > #{beginTime}) and readed
		= 'no'
	</select>
	<select id="selectCountNoReadedLastAlertsByCompanyId"
		parameterType="java.lang.Integer" resultType="java.lang.Integer">
		select count(id) from
		alert
		where containerId in (select containerId from container where
		companyId = #{companyId}) and readed= 'no'
		group BY alertTime DESC
	</select>
	<!-- 查询?天内未读的警告数 -->
	<select id="selectCountNoReadedBeforeSomeDays"
		parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(id) from
		alert
		where containerId in (select containerId from container where
		companyId = #{companyId}) and readed= 'no' 
		and alertLongTime > #{beginTime}
		ORDER BY alertTime DESC
	</select>

	<select id="selectCountNoReadedAlertsByCompanyId" parameterType="java.lang.Integer"
		resultType="java.lang.Integer">
		select count(id) from alert where containerId in (select
		containerId from container where companyId = #{companyId}) and readed
		= 'no'
	</select>

	<delete id="deletAlertById" parameterType="java.lang.Integer">
		delete from alert
		where id = #{id}
	</delete>

	<insert id="insertAlert" parameterType="com.cctrace.entity.Alert">
		insert into alert
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="containerId != null">
				containerId,
			</if>
			<if test="alertTime != null">
				alertTime,
			</if>
			<if test="alertLongTime != null">
				alertLongTime,
			</if>
			<if test="alertType != null">
				alertType,
			</if>
			<if test="alertContent != null">
				alertContent,
			</if>
			<if test="lat != null">
				lat,
			</if>
			<if test="lon != null">
				lon,
			</if>
			<if test="readed != null">
				readed ,
			</if>
			<if test="alarm_num  != null">
				alarm_num ,
			</if>
			<if test="gpsPosition  != null">
				gpsPosition ,
			</if>
				updateTime ,updateLongTime,
			<if test="companyId  != null">
				companyId ,
			</if>
				
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="containerId != null">
				#{containerId,jdbcType=VARCHAR},
			</if>
			<if test="alertTime != null">
				#{alertTime,jdbcType=VARCHAR},
			</if>
			<if test="alertLongTime != null">
				#{alertLongTime,jdbcType=BIGINT},
			</if>
			<if test="alertType != null">
				#{alertType,jdbcType=VARCHAR},
			</if>
			<if test="alertContent != null">
				#{alertContent,jdbcType=VARCHAR},
			</if>
			<if test="lat != null">
				#{lat},
			</if>
			<if test="lon != null">
				#{lon},
			</if>
			<if test="readed != null">
				#{readed},
			</if>
			<if test="alarm_num != null">
				#{alarm_num},
			</if>
			<if test="gpsPosition != null">
				#{gpsPosition},
			</if>
			#{alertTime},
			#{alertLongTime},
			<if test="companyId != null">
				#{companyId},
			</if>
		</trim>
	</insert>


	<select id="selectContainersWithAlert" resultType="com.cctrace.entity.Alert">

		SELECT * FROM
		alert
		GROUP BY containerId

	</select>


	<update id="updateAlertById" parameterType="com.cctrace.entity.Alert">
		update alert
		<set>
			<if test="containerId != null">
				containerId = #{containerId,jdbcType=VARCHAR},
			</if>
			<if test="alertTime != null">
				alertTime = #{alertTime,jdbcType=VARCHAR},
			</if>
			<if test="alertLongTime != null">
				alertLongTime = #{alertLongTime,jdbcType=BIGINT},
			</if>
			<if test="alertType != null">
				alertType = #{alertType,jdbcType=VARCHAR},
			</if>
			<if test="alertContent != null">
				alertContent = #{alertContent,jdbcType=VARCHAR},
			</if>
			<if test="lat != null">
				lat = #{lat},
			</if>
			<if test="lon != null">
				lon = #{lon},
			</if>
			<if test="readed != null">
				readed = #{readed},
			</if>
			<if test="alarm_num != null">
				alarm_num  = #{alarm_num},
			</if>
			<if test="gpsPosition != null">
				gpsPosition  = #{gpsPosition},
			</if>
			<if test="companyId != null">
				companyId  = #{companyId},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	
	<update id="updateAlertTimeById" parameterType="java.lang.Integer">
		update alert 
		<set>
			updateTime  =now(),
			<if test="updateLongTime != null">
				updateLongTime  = #{updateLongTime},
			</if>
		</set>
		where id = #{id}
	</update>
	
	
	<update id="updateAlertReadStateToYesByAlertId" parameterType="java.lang.Integer">
		update alert set readed = 'yes' where id = #{alertId}
	</update>

	<!-- 模糊查询冷藏箱列表在通知模块 -->
	<select id="selectContainersLikeyInAlert" parameterType="java.lang.String"
		resultType="com.cctrace.entity.Alert">

		SELECT containerId FROM alert
		WHERE containerId LIKE
		CONCAT('%',#{containerId} ,'%')
		GROUP BY containerId

	</select>

	<!-- 查询两段时间内的严重警告信息 -->
	<select id="selectNewAlertInTwoTime" parameterType="java.util.Map"
		resultType="com.cctrace.entity.Alert">
		select * from alert where containerId in(select containerId
		from container where companyId = #{companyId})
		and alertType = 'TKalarm'
		and alertLongTime between #{startTime} and #{endTime}
		order by alertTime desc
	</select>
	
	<!-- 查询两段时间内的警告信息 -->
	<select id="selectShowAlertInTwoTime" parameterType="java.util.Map"
		resultType="com.cctrace.entity.Alert">
		SELECT * FROM alert WHERE containerId LIKE CONCAT('%',#{containerId} ,'%')
		<if test="startTime != null and startTime !='' and endTime != null and endTime !=''" >
		AND alertLongTime BETWEEN #{startTime} and #{endTime}
		</if>
		ORDER BY alertTime DESC
	</select>
	<!-- 查询？秒前的警告信息 -->
	<select id="selectAlertInBeforeSeconds" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT count(id) FROM alert WHERE containerId = #{containerId}
		AND alertLongTime BETWEEN #{startTime} and #{endTime} and readed = 'no' AND alarm_num IS NOT NULL
	</select>
	<!-- 如果没有开机等指令，显示的是一天的警告信息 -->
	<select id="selectAlertGroupInOneDay" parameterType="java.util.Map" resultType="com.cctrace.entity.Alert">
		select * from 
		(select * from alert WHERE containerId = #{containerId} and alertLongTime BETWEEN {start} and {end} order by alertLongTime desc) 
		aa  group by alarm_num order by alertLongTime desc
	</select>
	
	<!-- 如果有开机等指令，显示指令执行后的警告 -->
	<select id="selectAlertAfterCommand" parameterType="java.util.Map" resultType="com.cctrace.entity.Alert">
		select * from 
		(select * from alert WHERE containerId = #{containerId} AND alertLongTime > #{longTime} order by alertLongTime desc)aa
		group by alarm_num order by alertLongTime desc
	</select>
	
	<!-- 查询存在的冷藏箱警告,新方法尝试 -->
	<select id="selectAlertWithContainer" parameterType="java.lang.Integer" resultType="java.lang.String">
		select containerId from alert where containerId IN (select containerId
		from container where companyId = #{companyId}) group by containerId
	
	</select>
	
	<!-- 配置缓存 -->
	<!-- <cache eviction="FIFO" flushInterval="10000" size="128" readOnly="true" /> -->
</mapper>